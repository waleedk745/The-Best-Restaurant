# -*- coding: utf-8 -*-
"""
/***************************************************************************
 thebestrestaurant
                                 A QGIS plugin
 this plugin finds the best restaurant
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-05-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by waleed
        email                : waleedk745@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.core import *
from qgis.utils import *
from qgis.gui import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .the_best_restaurant_dialog import thebestrestaurantDialog
import os.path
from .food_scraper import best_restaurant
import polyline


class thebestrestaurant:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'thebestrestaurant_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = thebestrestaurantDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&The Best Restaurant')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'thebestrestaurant')
        self.toolbar.setObjectName(u'thebestrestaurant')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('thebestrestaurant', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/the_best_restaurant/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&The Best Restaurant'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        dialog = QProgressDialog()
        dialog.setWindowTitle("Best Eatery Progress")
        dialog.setLabelText("...")
        bar = QProgressBar(dialog)
        bar.setTextVisible(True)
        bar.setMaximum(100)
        bar.setValue(0)
        dialog.setBar(bar)
        dialog.setMinimumWidth(300)
        dialog.show()
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            city= self.dlg.lineEdit.text()
            dish= self.dlg.lineEdit_3.text()
            location= self.dlg.lineEdit_2.text()
            price_min= int(self.dlg.lineEdit_4.text())
            price_max= int(self.dlg.lineEdit_5.text())
            bar.setValue(10)
            
            class_obj= best_restaurant(city,location,dish,price_min,price_max)
            checker=class_obj.shortner()
            if (checker==True):
                best_restaurants=class_obj.data_extractor(dish,price_min,price_max)
                bar.setValue(50)
                user_coords=class_obj.user_location()
                best_restaurant_loc= class_obj.best_retaurants_location(best_restaurants,user_coords)
                bar.setValue(60)
                final_restaurant=class_obj.distance_finder(best_restaurant_loc,user_coords)
                fin=final_restaurant[0]
                bar.setValue(70)
                direction_route_points=class_obj.directions_finder(user_coords,final_restaurant)
                direction_route=polyline.decode(direction_route_points)
                bar.setValue(80)
                direction_wkt=class_obj.shapefile_creator_multiline(direction_route)
                user_point=class_obj.user_wkt(user_coords)
                restaurant_point=class_obj.restaurant_wkt(final_restaurant)
                bar.setValue(90)
#            temp=QgsVectorLayer()
                temp = QgsVectorLayer("MULTILINESTRING?crs=epsg:4326", "Route", "memory")
                QgsProject.instance().addMapLayer(temp)
                temp.startEditing()
                geom = QgsGeometry()
                geom = QgsGeometry.fromWkt(direction_wkt)
                feat = QgsFeature()
                feat.setGeometry(geom)
                temp.dataProvider().addFeatures([feat])
                temp.commitChanges()
                p1=QgsVectorLayer()
                p1=QgsVectorLayer("POINT?crs=epsg:4326", "User", "memory")
                QgsProject.instance().addMapLayer(p1)
                p1.startEditing()
                g=QgsGeometry()
                g=QgsGeometry.fromWkt(user_point)
                f=QgsFeature()
                f.setGeometry(g)
                p1.dataProvider().addFeatures([f])
                p1.commitChanges()
                p2=QgsVectorLayer()
                p2=QgsVectorLayer("POINT?crs=epsg:4326", fin, "memory")
                QgsProject.instance().addMapLayer(p2)
                p2.startEditing()
                g1=QgsGeometry()
                g1=QgsGeometry.fromWkt(restaurant_point)
                f1=QgsFeature()
                f1.setGeometry(g1)
                p2.dataProvider().addFeatures([f1])
                p2.commitChanges()
                bar.setValue(100)
                message="The Best Restaurant I Found is " +fin
                MessageBar = iface.messageBar().createMessage(message)
                iface.messageBar().pushWidget(MessageBar, Qgis.Info)
            elif(checker==False):    
                rest=class_obj.all_restaurants()
                bar.setValue(20)
                r=class_obj.restaurant_urls(rest)
                bar.setValue(30)
                dish_per_restaurant=class_obj.dish_per_res(r,rest)
                bar.setValue(40)
                class_obj.database_writer(rest,dish_per_restaurant)
                best_restaurants=class_obj.data_extractor(dish,price_min,price_max)
                bar.setValue(50)
                user_coords=class_obj.user_location()
                best_restaurant_loc= class_obj.best_retaurants_location(best_restaurants,user_coords)
                bar.setValue(60)
                final_restaurant=class_obj.distance_finder(best_restaurant_loc,user_coords)
                fin=final_restaurant[0]
                bar.setValue(70)
                direction_route_points=class_obj.directions_finder(user_coords,final_restaurant)
                direction_route=polyline.decode(direction_route_points)
                bar.setValue(80)
                direction_wkt=class_obj.shapefile_creator_multiline(direction_route)
                user_point=class_obj.user_wkt(user_coords)
                restaurant_point=class_obj.restaurant_wkt(final_restaurant)
                bar.setValue(90)
#            temp=QgsVectorLayer()
                temp = QgsVectorLayer("MULTILINESTRING?crs=epsg:4326", "Route", "memory")
                QgsProject.instance().addMapLayer(temp)
                temp.startEditing()
                geom = QgsGeometry()
                geom = QgsGeometry.fromWkt(direction_wkt)
                feat = QgsFeature()
                feat.setGeometry(geom)
                temp.dataProvider().addFeatures([feat])
                temp.commitChanges()
                p1=QgsVectorLayer()
                p1=QgsVectorLayer("POINT?crs=epsg:4326", "User", "memory")
                QgsProject.instance().addMapLayer(p1)
                p1.startEditing()
                g=QgsGeometry()
                g=QgsGeometry.fromWkt(user_point)
                f=QgsFeature()
                f.setGeometry(g)
                p1.dataProvider().addFeatures([f])
                p1.commitChanges()
                p2=QgsVectorLayer()
                p2=QgsVectorLayer("POINT?crs=epsg:4326", fin, "memory")
                QgsProject.instance().addMapLayer(p2)
                p2.startEditing()
                g1=QgsGeometry()
                g1=QgsGeometry.fromWkt(restaurant_point)
                f1=QgsFeature()
                f1.setGeometry(g1)
                p2.dataProvider().addFeatures([f1])
                p2.commitChanges()
                bar.setValue(100)
                message="The Best Restaurant I Found is " +fin
                MessageBar = iface.messageBar().createMessage(message)
                iface.messageBar().pushWidget(MessageBar, Qgis.Info)
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
